plugins {
	id 'org.springframework.boot' version '2.3.3.RELEASE'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'com.palantir.docker' version '0.22.1'
	id 'com.palantir.docker-run' version '0.22.1'
	id 'java'
    id 'java-library'
	id 'idea'
	id 'eclipse'
    id 'application'
    id 'groovy'
}

group = 'br.challenge.transaction'
version = '1.0.0-SNAPSHOT'
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
}

ext {
	set('springCloudVersion', "Hoxton.SR8")
	set('springBootVersion', '2.3.3.RELEASE')
	set('dockerVersion', '0.22.1')
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-parent:2.3.3.RELEASE'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation group: 'org.springframework.boot', name: 'spring-boot-gradle-plugin', version: '2.3.3.RELEASE'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-server'
	implementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-zuul'
    implementation 'org.springframework.boot:spring-boot-starter-tomcat'
}

apply plugin: 'org.springframework.boot'

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

test {
	useJUnitPlatform()
}

application {
    mainClass = 'br.challenge.transaction.discovery.DiscoveryApplication'
}

bootJar {
	enabled = true
	classifier = 'all'
    mainClassName = 'br.challenge.transaction.discovery.DiscoveryApplication'
	destinationDirectory = file("${project.buildDir}/lib")
}

bootRun {
	optimizedLaunch = false
}

apply plugin: 'com.palantir.docker'
apply plugin: 'com.palantir.docker-run'

docker {
	dependsOn clean
    dependsOn build
    name "${project.name}"
    files "build/lib/${project.name}-${project.version}-all.jar"
    buildArgs(['JAR_FILE': "${project.name}-${project.version}-all.jar"])
}

dockerRun {
    name "${project.name}"
    image "${project.name}"
    ports '8082:80'
    clean true
}
